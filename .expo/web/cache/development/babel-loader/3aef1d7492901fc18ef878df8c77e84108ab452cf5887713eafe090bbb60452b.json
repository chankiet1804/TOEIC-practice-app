{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useNavigation } from '@react-navigation/native';\nimport { insertTopics, getDBConnection } from \"../../../../database/db-service\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var SaveButton = function SaveButton(_ref) {\n  var title = _ref.title,\n    description = _ref.description,\n    vocabularyList = _ref.vocabularyList,\n    onSuccess = _ref.onSuccess;\n  var navigation = useNavigation();\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isSaving = _useState2[0],\n    setIsSaving = _useState2[1];\n  var handleSaveTopic = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      if (!title.trim()) {\n        Alert.alert('Lỗi', 'Vui lòng nhập tiêu đề chủ đề');\n        return;\n      }\n      var hasEmptyFields = vocabularyList.some(function (item) {\n        return !item.term.trim() || !item.definition.trim();\n      });\n      if (hasEmptyFields) {\n        Alert.alert('Lỗi', 'Vui lòng điền đầy đủ thuật ngữ và định nghĩa');\n        return;\n      }\n      setIsSaving(true);\n      try {\n        var db = yield getDBConnection();\n        var topicId = title.toLowerCase().replace(/\\s+/g, '-');\n        var vocabData = {\n          topic: title,\n          description: description,\n          vocabulary: vocabularyList.map(function (item) {\n            return {\n              id: item.id.toString(),\n              term: item.term,\n              definition: item.definition\n            };\n          })\n        };\n        yield insertTopics(db, vocabData);\n        var _newTopic = {\n          TopicID: topicId,\n          TopicName: title,\n          wordCount: vocabularyList.length\n        };\n        if (onSuccess) {\n          onSuccess(_newTopic);\n        }\n        Alert.alert('Thành công', 'Đã lưu chủ đề thành công', [{\n          text: 'OK',\n          onPress: function onPress() {\n            navigation.goBack();\n          }\n        }]);\n      } catch (error) {\n        console.error('Error saving topic:', error);\n        Alert.alert('Lỗi', 'Không thể lưu chủ đề. Vui lòng thử lại sau.');\n      } finally {\n        setIsSaving(false);\n      }\n    });\n    return function handleSaveTopic() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(TouchableOpacity, {\n    style: [styles.saveButton, isSaving && styles.saveButtonDisabled],\n    onPress: handleSaveTopic,\n    disabled: isSaving,\n    children: isSaving ? _jsx(ActivityIndicator, {\n      color: \"#fff\"\n    }) : _jsx(Text, {\n      style: styles.saveButtonText,\n      children: \"L\\u01B0u\"\n    })\n  });\n};\nvar styles = StyleSheet.create({\n  saveButton: {\n    backgroundColor: \"#4A90E2\",\n    height: 50,\n    borderRadius: 25,\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    alignSelf: \"center\",\n    marginTop: 16,\n    width: '80%',\n    shadowColor: \"#000\",\n    shadowOffset: {\n      width: 0,\n      height: 2\n    },\n    shadowOpacity: 0.25,\n    shadowRadius: 3.84,\n    elevation: 5\n  },\n  saveButtonDisabled: {\n    opacity: 0.7\n  },\n  saveButtonText: {\n    color: \"#fff\",\n    fontSize: 18,\n    fontWeight: \"bold\"\n  }\n});","map":{"version":3,"names":["React","useState","TouchableOpacity","Text","StyleSheet","Alert","ActivityIndicator","useNavigation","insertTopics","getDBConnection","jsx","_jsx","SaveButton","_ref","title","description","vocabularyList","onSuccess","navigation","_useState","_useState2","_slicedToArray","isSaving","setIsSaving","handleSaveTopic","_ref2","_asyncToGenerator","trim","alert","hasEmptyFields","some","item","term","definition","db","topicId","toLowerCase","replace","vocabData","topic","vocabulary","map","id","toString","newTopic","TopicID","TopicName","wordCount","length","text","onPress","goBack","error","console","apply","arguments","style","styles","saveButton","saveButtonDisabled","disabled","children","color","saveButtonText","create","backgroundColor","height","borderRadius","justifyContent","alignItems","alignSelf","marginTop","width","shadowColor","shadowOffset","shadowOpacity","shadowRadius","elevation","opacity","fontSize","fontWeight"],"sources":["D:/Loc2023-2024/Mobile App/TOEIC-practice-app/src/screens/Vocabulary/VocabularySubscreen/MyLibraryScreen/SaveButton.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { TouchableOpacity, Text, StyleSheet, Alert, ActivityIndicator } from 'react-native';\r\nimport { useNavigation } from '@react-navigation/native';\r\nimport { insertTopics, getDBConnection } from '../../../../database/db-service';\r\nimport * as SQLite from 'expo-sqlite';\r\n\r\ninterface SaveButtonProps {\r\n  title: string;\r\n  description: string;\r\n  vocabularyList: Array<{\r\n    id: number;\r\n    term: string;\r\n    definition: string;\r\n  }>;\r\n  onSuccess?: (newTopic: any) => void;\r\n}\r\n\r\nexport const SaveButton: React.FC<SaveButtonProps> = ({\r\n  title,\r\n  description,\r\n  vocabularyList,\r\n  onSuccess\r\n}) => {\r\n  const navigation = useNavigation();\r\n  const [isSaving, setIsSaving] = useState(false);\r\n\r\n  const handleSaveTopic = async () => {\r\n    // Kiểm tra dữ liệu trước khi lưu\r\n    if (!title.trim()) {\r\n      Alert.alert('Lỗi', 'Vui lòng nhập tiêu đề chủ đề');\r\n      return;\r\n    }\r\n\r\n    const hasEmptyFields = vocabularyList.some(\r\n      item => !item.term.trim() || !item.definition.trim()\r\n    );\r\n    if (hasEmptyFields) {\r\n      Alert.alert('Lỗi', 'Vui lòng điền đầy đủ thuật ngữ và định nghĩa');\r\n      return;\r\n    }\r\n\r\n    setIsSaving(true);\r\n\r\n    try {\r\n      // Kết nối database\r\n      const db = await getDBConnection();\r\n      \r\n      // Chuẩn bị dữ liệu để lưu\r\n      const topicId = title.toLowerCase().replace(/\\s+/g, '-');\r\n      const vocabData = {\r\n        topic: title,\r\n        description: description,\r\n        vocabulary: vocabularyList.map(item => ({\r\n          id: item.id.toString(),\r\n          term: item.term,\r\n          definition: item.definition,\r\n        })),\r\n      };\r\n\r\n      // Lưu vào database\r\n      await insertTopics(db, vocabData);\r\n\r\n      // Tạo topic mới để hiển thị trong danh sách\r\n      const newTopic = {\r\n        TopicID: topicId,\r\n        TopicName: title,\r\n        wordCount: vocabularyList.length,\r\n      };\r\n\r\n      // Gọi callback để cập nhật UI\r\n      if (onSuccess) {\r\n        onSuccess(newTopic);\r\n      }\r\n\r\n      // Hiển thị thông báo thành công\r\n      Alert.alert(\r\n        'Thành công',\r\n        'Đã lưu chủ đề thành công',\r\n        [\r\n          {\r\n            text: 'OK',\r\n            onPress: () => {\r\n              navigation.goBack(); // Quay về màn hình trước\r\n            }\r\n          }\r\n        ]\r\n      );\r\n    } catch (error) {\r\n      console.error('Error saving topic:', error);\r\n      Alert.alert(\r\n        'Lỗi',\r\n        'Không thể lưu chủ đề. Vui lòng thử lại sau.'\r\n      );\r\n    } finally {\r\n      setIsSaving(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <TouchableOpacity\r\n      style={[styles.saveButton, isSaving && styles.saveButtonDisabled]}\r\n      onPress={handleSaveTopic}\r\n      disabled={isSaving}\r\n    >\r\n      {isSaving ? (\r\n        <ActivityIndicator color=\"#fff\" />\r\n      ) : (\r\n        <Text style={styles.saveButtonText}>Lưu</Text>\r\n      )}\r\n    </TouchableOpacity>\r\n  );\r\n};\r\n\r\nconst styles = StyleSheet.create({\r\n  saveButton: {\r\n    backgroundColor: \"#4A90E2\",\r\n    height: 50,\r\n    borderRadius: 25,\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    alignSelf: \"center\",\r\n    marginTop: 16,\r\n    width: '80%',\r\n    shadowColor: \"#000\",\r\n    shadowOffset: {\r\n      width: 0,\r\n      height: 2,\r\n    },\r\n    shadowOpacity: 0.25,\r\n    shadowRadius: 3.84,\r\n    elevation: 5,\r\n  },\r\n  saveButtonDisabled: {\r\n    opacity: 0.7,\r\n  },\r\n  saveButtonText: {\r\n    color: \"#fff\",\r\n    fontSize: 18,\r\n    fontWeight: \"bold\",\r\n  }\r\n});"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAAC,OAAAC,gBAAA;AAAA,OAAAC,IAAA;AAAA,OAAAC,UAAA;AAAA,OAAAC,KAAA;AAAA,OAAAC,iBAAA;AAExC,SAASC,aAAa,QAAQ,0BAA0B;AACxD,SAASC,YAAY,EAAEC,eAAe;AAA0C,SAAAC,GAAA,IAAAC,IAAA;AAchF,OAAO,IAAMC,UAAqC,GAAG,SAAxCA,UAAqCA,CAAAC,IAAA,EAK5C;EAAA,IAJJC,KAAK,GAAAD,IAAA,CAALC,KAAK;IACLC,WAAW,GAAAF,IAAA,CAAXE,WAAW;IACXC,cAAc,GAAAH,IAAA,CAAdG,cAAc;IACdC,SAAS,GAAAJ,IAAA,CAATI,SAAS;EAET,IAAMC,UAAU,GAAGX,aAAa,CAAC,CAAC;EAClC,IAAAY,SAAA,GAAgClB,QAAQ,CAAC,KAAK,CAAC;IAAAmB,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAAxCG,QAAQ,GAAAF,UAAA;IAAEG,WAAW,GAAAH,UAAA;EAE5B,IAAMI,eAAe;IAAA,IAAAC,KAAA,GAAAC,iBAAA,CAAG,aAAY;MAElC,IAAI,CAACZ,KAAK,CAACa,IAAI,CAAC,CAAC,EAAE;QACjBtB,KAAK,CAACuB,KAAK,CAAC,KAAK,EAAE,8BAA8B,CAAC;QAClD;MACF;MAEA,IAAMC,cAAc,GAAGb,cAAc,CAACc,IAAI,CACxC,UAAAC,IAAI;QAAA,OAAI,CAACA,IAAI,CAACC,IAAI,CAACL,IAAI,CAAC,CAAC,IAAI,CAACI,IAAI,CAACE,UAAU,CAACN,IAAI,CAAC,CAAC;MAAA,CACtD,CAAC;MACD,IAAIE,cAAc,EAAE;QAClBxB,KAAK,CAACuB,KAAK,CAAC,KAAK,EAAE,8CAA8C,CAAC;QAClE;MACF;MAEAL,WAAW,CAAC,IAAI,CAAC;MAEjB,IAAI;QAEF,IAAMW,EAAE,SAASzB,eAAe,CAAC,CAAC;QAGlC,IAAM0B,OAAO,GAAGrB,KAAK,CAACsB,WAAW,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,GAAG,CAAC;QACxD,IAAMC,SAAS,GAAG;UAChBC,KAAK,EAAEzB,KAAK;UACZC,WAAW,EAAEA,WAAW;UACxByB,UAAU,EAAExB,cAAc,CAACyB,GAAG,CAAC,UAAAV,IAAI;YAAA,OAAK;cACtCW,EAAE,EAAEX,IAAI,CAACW,EAAE,CAACC,QAAQ,CAAC,CAAC;cACtBX,IAAI,EAAED,IAAI,CAACC,IAAI;cACfC,UAAU,EAAEF,IAAI,CAACE;YACnB,CAAC;UAAA,CAAC;QACJ,CAAC;QAGD,MAAMzB,YAAY,CAAC0B,EAAE,EAAEI,SAAS,CAAC;QAGjC,IAAMM,SAAQ,GAAG;UACfC,OAAO,EAAEV,OAAO;UAChBW,SAAS,EAAEhC,KAAK;UAChBiC,SAAS,EAAE/B,cAAc,CAACgC;QAC5B,CAAC;QAGD,IAAI/B,SAAS,EAAE;UACbA,SAAS,CAAC2B,SAAQ,CAAC;QACrB;QAGAvC,KAAK,CAACuB,KAAK,CACT,YAAY,EACZ,0BAA0B,EAC1B,CACE;UACEqB,IAAI,EAAE,IAAI;UACVC,OAAO,EAAE,SAAAA,QAAA,EAAM;YACbhC,UAAU,CAACiC,MAAM,CAAC,CAAC;UACrB;QACF,CAAC,CAEL,CAAC;MACH,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;QAC3C/C,KAAK,CAACuB,KAAK,CACT,KAAK,EACL,6CACF,CAAC;MACH,CAAC,SAAS;QACRL,WAAW,CAAC,KAAK,CAAC;MACpB;IACF,CAAC;IAAA,gBAtEKC,eAAeA,CAAA;MAAA,OAAAC,KAAA,CAAA6B,KAAA,OAAAC,SAAA;IAAA;EAAA,GAsEpB;EAED,OACE5C,IAAA,CAACT,gBAAgB;IACfsD,KAAK,EAAE,CAACC,MAAM,CAACC,UAAU,EAAEpC,QAAQ,IAAImC,MAAM,CAACE,kBAAkB,CAAE;IAClET,OAAO,EAAE1B,eAAgB;IACzBoC,QAAQ,EAAEtC,QAAS;IAAAuC,QAAA,EAElBvC,QAAQ,GACPX,IAAA,CAACL,iBAAiB;MAACwD,KAAK,EAAC;IAAM,CAAE,CAAC,GAElCnD,IAAA,CAACR,IAAI;MAACqD,KAAK,EAAEC,MAAM,CAACM,cAAe;MAAAF,QAAA,EAAC;IAAG,CAAM;EAC9C,CACe,CAAC;AAEvB,CAAC;AAED,IAAMJ,MAAM,GAAGrD,UAAU,CAAC4D,MAAM,CAAC;EAC/BN,UAAU,EAAE;IACVO,eAAe,EAAE,SAAS;IAC1BC,MAAM,EAAE,EAAE;IACVC,YAAY,EAAE,EAAE;IAChBC,cAAc,EAAE,QAAQ;IACxBC,UAAU,EAAE,QAAQ;IACpBC,SAAS,EAAE,QAAQ;IACnBC,SAAS,EAAE,EAAE;IACbC,KAAK,EAAE,KAAK;IACZC,WAAW,EAAE,MAAM;IACnBC,YAAY,EAAE;MACZF,KAAK,EAAE,CAAC;MACRN,MAAM,EAAE;IACV,CAAC;IACDS,aAAa,EAAE,IAAI;IACnBC,YAAY,EAAE,IAAI;IAClBC,SAAS,EAAE;EACb,CAAC;EACDlB,kBAAkB,EAAE;IAClBmB,OAAO,EAAE;EACX,CAAC;EACDf,cAAc,EAAE;IACdD,KAAK,EAAE,MAAM;IACbiB,QAAQ,EAAE,EAAE;IACZC,UAAU,EAAE;EACd;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}
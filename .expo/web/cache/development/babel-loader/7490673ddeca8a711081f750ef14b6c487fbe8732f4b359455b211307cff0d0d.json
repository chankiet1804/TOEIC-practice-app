{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as SQLite from 'expo-sqlite';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nexport var getDBConnection = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      if (Platform.OS === 'web') {\n        throw new Error('SQLite is not supported on web platform');\n      }\n      var db = SQLite.openDatabase('Toeic-data.db');\n      if (!db) {\n        throw new Error('Could not open database');\n      }\n      return db;\n    } catch (error) {\n      console.error('Error opening database:', error);\n      throw error;\n    }\n  });\n  return function getDBConnection() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar getMockDBForWeb = function getMockDBForWeb() {\n  return {\n    transaction: function transaction(callback) {\n      var tx = {\n        executeSql: function executeSql(query, params, successCallback) {\n          if (successCallback) {\n            successCallback(null, {\n              rows: {\n                _array: []\n              }\n            });\n          }\n        }\n      };\n      callback(tx);\n    }\n  };\n};\nexport var createTables = function () {\n  var _ref2 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Tests (\n                        TestID TEXT PRIMARY KEY,\n                        Title TEXT NOT NULL\n                    );`, []);\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Parts (\n                        PartID TEXT PRIMARY KEY,\n                        TestID TEXT,\n                        PartNumber INTEGER NOT NULL,\n                        FOREIGN KEY (TestID) REFERENCES Tests(TestID)\n                    );`, []);\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Questions (\n                        QuestionID TEXT PRIMARY KEY,\n                        PartID TEXT,\n                        QuestionNumber INTEGER NOT NULL,\n                        QuestionText TEXT,\n                        ImagePath TEXT,\n                        AudioPath TEXT,\n                        CorrectAnswer TEXT,\n                        FOREIGN KEY (PartID) REFERENCES Parts(PartID)\n                    );`, []);\n      }, function (error) {\n        console.error('Error creating tables:', error);\n        reject(error);\n      }, function () {\n        console.log('All tables created successfully');\n        resolve(true);\n      });\n    });\n  });\n  return function createTables(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var insertTests = function () {\n  var _ref3 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        var _loop = function _loop(i) {\n          tx.executeSql('INSERT OR IGNORE INTO Tests (TestID, Title) VALUES (?, ?)', [i.toString(), `SpeakingTest${i}`], function (_, result) {\n            if (i === 10) {\n              console.log('All tests inserted successfully');\n            }\n          });\n        };\n        for (var i = 1; i <= 10; i++) {\n          _loop(i);\n        }\n      }, function (error) {\n        console.error('Error inserting tests:', error);\n        reject(error);\n      }, function () {\n        console.log('Tests transaction completed');\n        resolve(true);\n      });\n    });\n  });\n  return function insertTests(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var insertParts = function () {\n  var _ref4 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        var _loop2 = function _loop2(testId) {\n          var _loop3 = function _loop3(partNumber) {\n            var partId = `${testId}_${partNumber}`;\n            tx.executeSql('INSERT OR IGNORE INTO Parts (PartID, TestID, PartNumber) VALUES (?, ?, ?)', [partId, testId.toString(), partNumber], function (_, result) {\n              if (testId === 10 && partNumber === 5) {\n                console.log('All parts inserted successfully');\n              }\n            });\n          };\n          for (var partNumber = 1; partNumber <= 5; partNumber++) {\n            _loop3(partNumber);\n          }\n        };\n        for (var testId = 1; testId <= 10; testId++) {\n          _loop2(testId);\n        }\n      }, function (error) {\n        console.error('Error inserting parts:', error);\n        reject(error);\n      }, function () {\n        console.log('Parts transaction completed');\n        resolve(true);\n      });\n    });\n  });\n  return function insertParts(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getAllTests = function () {\n  var _ref5 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM Tests ORDER BY TestID', [], function (_, _ref6) {\n          var _array = _ref6.rows._array;\n          resolve(_array);\n        }, function (_, error) {\n          reject(error);\n          return false;\n        });\n      });\n    });\n  });\n  return function getAllTests(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getPartsForTest = function () {\n  var _ref7 = _asyncToGenerator(function* (db, testId) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM Parts WHERE TestID = ? ORDER BY PartNumber', [testId], function (_, _ref8) {\n          var _array = _ref8.rows._array;\n          resolve(_array);\n        }, function (_, error) {\n          reject(error);\n          return false;\n        });\n      });\n    });\n  });\n  return function getPartsForTest(_x5, _x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["SQLite","Platform","getDBConnection","_ref","_asyncToGenerator","OS","Error","db","openDatabase","error","console","apply","arguments","getMockDBForWeb","transaction","callback","tx","executeSql","query","params","successCallback","rows","_array","createTables","_ref2","Promise","resolve","reject","log","_x","insertTests","_ref3","_loop","i","toString","_","result","_x2","insertParts","_ref4","_loop2","testId","_loop3","partNumber","partId","_x3","getAllTests","_ref5","_ref6","_x4","getPartsForTest","_ref7","_ref8","_x5","_x6"],"sources":["D:/Loc2023-2024/Mobile App/TOEIC-practice-app/src/database/db-service.ts"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\nimport { Platform } from 'react-native';\r\n\r\nexport const getDBConnection = async () => {\r\n    try {\r\n      // Kiểm tra nếu đang chạy trên web\r\n      if (Platform.OS === 'web') {\r\n        throw new Error('SQLite is not supported on web platform');\r\n      }\r\n      \r\n      const db = SQLite.openDatabase('Toeic-data.db');\r\n      if (!db) {\r\n        throw new Error('Could not open database');\r\n      }\r\n      return db;\r\n    } catch (error) {\r\n      console.error('Error opening database:', error);\r\n      throw error;\r\n    }\r\n  };\r\n\r\n// Hàm mock database cho web\r\nconst getMockDBForWeb = () => {\r\n    return {\r\n        transaction: (callback: any) => {\r\n            // Mock transaction behavior\r\n            const tx = {\r\n                executeSql: (query: string, params: any[], successCallback: any) => {\r\n                    // Giả lập thành công và trả về dữ liệu mock\r\n                    if (successCallback) {\r\n                        successCallback(null, { rows: { _array: [] } });\r\n                    }\r\n                }\r\n            };\r\n            callback(tx);\r\n        }\r\n    };\r\n};\r\n\r\nexport const createTables = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(\r\n            tx => {\r\n                // Tạo bảng Tests\r\n                tx.executeSql(\r\n                    `CREATE TABLE IF NOT EXISTS Tests (\r\n                        TestID TEXT PRIMARY KEY,\r\n                        Title TEXT NOT NULL\r\n                    );`,\r\n                    []\r\n                );\r\n\r\n                // Tạo bảng Parts\r\n                tx.executeSql(\r\n                    `CREATE TABLE IF NOT EXISTS Parts (\r\n                        PartID TEXT PRIMARY KEY,\r\n                        TestID TEXT,\r\n                        PartNumber INTEGER NOT NULL,\r\n                        FOREIGN KEY (TestID) REFERENCES Tests(TestID)\r\n                    );`,\r\n                    []\r\n                );\r\n\r\n                // Tạo bảng Questions\r\n                tx.executeSql(\r\n                    `CREATE TABLE IF NOT EXISTS Questions (\r\n                        QuestionID TEXT PRIMARY KEY,\r\n                        PartID TEXT,\r\n                        QuestionNumber INTEGER NOT NULL,\r\n                        QuestionText TEXT,\r\n                        ImagePath TEXT,\r\n                        AudioPath TEXT,\r\n                        CorrectAnswer TEXT,\r\n                        FOREIGN KEY (PartID) REFERENCES Parts(PartID)\r\n                    );`,\r\n                    []\r\n                );\r\n            },\r\n            (error) => {\r\n                console.error('Error creating tables:', error);\r\n                reject(error);\r\n            },\r\n            () => {\r\n                console.log('All tables created successfully');\r\n                resolve(true);\r\n            }\r\n        );\r\n    });\r\n};\r\n\r\n// tao danh sach cac bai test\r\nexport const insertTests = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n            // Insert 10 bài test\r\n            for (let i = 1; i <= 10; i++) {\r\n                tx.executeSql(\r\n                    'INSERT OR IGNORE INTO Tests (TestID, Title) VALUES (?, ?)',\r\n                    [i.toString(), `SpeakingTest${i}`],\r\n                    (_, result) => {\r\n                        if (i === 10) {\r\n                            console.log('All tests inserted successfully');\r\n                        }\r\n                    }\r\n                );\r\n            }\r\n        },\r\n        (error) => {\r\n            console.error('Error inserting tests:', error);\r\n            reject(error);\r\n        },\r\n        () => {\r\n            console.log('Tests transaction completed');\r\n            resolve(true);\r\n        });\r\n    });\r\n};\r\n\r\n// tao danh sach cac phan trong bai test\r\nexport const insertParts = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n            // Lặp qua 10 bài test\r\n            for (let testId = 1; testId <= 10; testId++) {\r\n                // Lặp qua 5 phần cho mỗi bài test\r\n                for (let partNumber = 1; partNumber <= 5; partNumber++) {\r\n                    const partId = `${testId}_${partNumber}`; // Tạo PartID duy nhất\r\n                    tx.executeSql(\r\n                        'INSERT OR IGNORE INTO Parts (PartID, TestID, PartNumber) VALUES (?, ?, ?)',\r\n                        [partId, testId.toString(), partNumber],\r\n                        (_, result) => {\r\n                            if (testId === 10 && partNumber === 5) {\r\n                                console.log('All parts inserted successfully');\r\n                            }\r\n                        }\r\n                    );\r\n                }\r\n            }\r\n        },\r\n        (error) => {\r\n            console.error('Error inserting parts:', error);\r\n            reject(error);\r\n        },\r\n        () => {\r\n            console.log('Parts transaction completed');\r\n            resolve(true);\r\n        });\r\n    });\r\n};\r\n\r\n// Hàm để lấy tất cả tests\r\nexport const getAllTests = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n            tx.executeSql(\r\n                'SELECT * FROM Tests ORDER BY TestID',\r\n                [],\r\n                (_, { rows: { _array } }) => {\r\n                    resolve(_array);\r\n                },\r\n                (_, error) => {\r\n                    reject(error);\r\n                    return false;\r\n                }\r\n            );\r\n        });\r\n    });\r\n};\r\n\r\n// Hàm để lấy tất cả parts của một test\r\nexport const getPartsForTest = async (db: SQLite.SQLiteDatabase, testId: string) => {\r\n    return new Promise((resolve, reject) => {\r\n        db.transaction(tx => {\r\n            tx.executeSql(\r\n                'SELECT * FROM Parts WHERE TestID = ? ORDER BY PartNumber',\r\n                [testId],\r\n                (_, { rows: { _array } }) => {\r\n                    resolve(_array);\r\n                },\r\n                (_, error) => {\r\n                    reject(error);\r\n                    return false;\r\n                }\r\n            );\r\n        });\r\n    });\r\n};\r\n\r\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}
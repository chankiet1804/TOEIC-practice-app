{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as SQLite from 'expo-sqlite';\nexport var getDBConnection = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      return SQLite.openDatabase('Toeic-data.db');\n    } catch (error) {\n      console.error('Error opening database:', error);\n      throw Error('Failed to open database');\n    }\n  });\n  return function getDBConnection() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var createTables = function () {\n  var _ref2 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Tests (\n            TestID TEXT PRIMARY KEY,\n            Title TEXT NOT NULL\n          );`, [], function () {\n          console.log('Tests table created successfully');\n        });\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Parts (\n            PartID TEXT PRIMARY KEY,\n            TestID TEXT,\n            PartNumber INTEGER NOT NULL,\n            FOREIGN KEY (TestID) REFERENCES Tests(TestID)\n          );`, [], function () {\n          console.log('Parts table created successfully');\n          resolve(true);\n        });\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Questions (\n            QuestionID TEXT PRIMARY KEY,\n            PartID TEXT,\n            QuestionNumber INTEGER NOT NULL,\n            QuestionText TEXT,\n            ImagePath TEXT,\n            AudioPath TEXT,\n            CorrectAnswer TEXT,\n            FOREIGN KEY (PartID) REFERENCES Parts(PartID)\n            );`, [], function () {\n          console.log('Questions table created successfully');\n          resolve(true);\n        });\n      });\n    });\n  });\n  return function createTables(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var insertTests = function () {\n  var _ref3 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        var _loop = function _loop(i) {\n          tx.executeSql('INSERT OR IGNORE INTO Tests (TestID, Title) VALUES (?, ?)', [i.toString(), `SpeakingTest${i}`], function (_, result) {\n            if (i === 10) {\n              console.log('All tests inserted successfully');\n            }\n          });\n        };\n        for (var i = 1; i <= 10; i++) {\n          _loop(i);\n        }\n      }, function (error) {\n        console.error('Error inserting tests:', error);\n        reject(error);\n      }, function () {\n        console.log('Tests transaction completed');\n        resolve(true);\n      });\n    });\n  });\n  return function insertTests(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var insertParts = function () {\n  var _ref4 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        var _loop2 = function _loop2(testId) {\n          var _loop3 = function _loop3(partNumber) {\n            var partId = `${testId}_${partNumber}`;\n            tx.executeSql('INSERT OR IGNORE INTO Parts (PartID, TestID, PartNumber) VALUES (?, ?, ?)', [partId, testId.toString(), partNumber], function (_, result) {\n              if (testId === 10 && partNumber === 8) {\n                console.log('All parts inserted successfully');\n              }\n            });\n          };\n          for (var partNumber = 1; partNumber <= 5; partNumber++) {\n            _loop3(partNumber);\n          }\n        };\n        for (var testId = 1; testId <= 10; testId++) {\n          _loop2(testId);\n        }\n      }, function (error) {\n        console.error('Error inserting parts:', error);\n        reject(error);\n      }, function () {\n        console.log('Parts transaction completed');\n        resolve(true);\n      });\n    });\n  });\n  return function insertParts(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getAllTests = function () {\n  var _ref5 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM Tests ORDER BY TestID', [], function (_, _ref6) {\n          var _array = _ref6.rows._array;\n          resolve(_array);\n        }, function (_, error) {\n          reject(error);\n          return false;\n        });\n      });\n    });\n  });\n  return function getAllTests(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getPartsForTest = function () {\n  var _ref7 = _asyncToGenerator(function* (db, testId) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM Parts WHERE TestID = ? ORDER BY PartNumber', [testId], function (_, _ref8) {\n          var _array = _ref8.rows._array;\n          resolve(_array);\n        }, function (_, error) {\n          reject(error);\n          return false;\n        });\n      });\n    });\n  });\n  return function getPartsForTest(_x5, _x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["SQLite","getDBConnection","_ref","_asyncToGenerator","openDatabase","error","console","Error","apply","arguments","createTables","_ref2","db","Promise","resolve","reject","transaction","tx","executeSql","log","_x","insertTests","_ref3","_loop","i","toString","_","result","_x2","insertParts","_ref4","_loop2","testId","_loop3","partNumber","partId","_x3","getAllTests","_ref5","_ref6","_array","rows","_x4","getPartsForTest","_ref7","_ref8","_x5","_x6"],"sources":["D:/Loc2023-2024/Mobile App/TOEIC-practice-app/src/database/db-service.ts"],"sourcesContent":["import * as SQLite from 'expo-sqlite';\r\n\r\nexport const getDBConnection = async () => {\r\n    try {\r\n      return SQLite.openDatabase('Toeic-data.db');\r\n    } catch (error) {\r\n      console.error('Error opening database:', error);\r\n      throw Error('Failed to open database');\r\n    }\r\n  };\r\n\r\n  export const createTables = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        // Tạo bảng Tests\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS Tests (\r\n            TestID TEXT PRIMARY KEY,\r\n            Title TEXT NOT NULL\r\n          );`,\r\n          [],\r\n          () => {\r\n            console.log('Tests table created successfully');\r\n          }\r\n        );\r\n  \r\n        // Tạo bảng Parts\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS Parts (\r\n            PartID TEXT PRIMARY KEY,\r\n            TestID TEXT,\r\n            PartNumber INTEGER NOT NULL,\r\n            FOREIGN KEY (TestID) REFERENCES Tests(TestID)\r\n          );`,\r\n          [],\r\n          () => {\r\n            console.log('Parts table created successfully');\r\n            resolve(true);\r\n          }\r\n        );\r\n        // Tạo bảng Parts\r\n        tx.executeSql(\r\n            `CREATE TABLE IF NOT EXISTS Questions (\r\n            QuestionID TEXT PRIMARY KEY,\r\n            PartID TEXT,\r\n            QuestionNumber INTEGER NOT NULL,\r\n            QuestionText TEXT,\r\n            ImagePath TEXT,\r\n            AudioPath TEXT,\r\n            CorrectAnswer TEXT,\r\n            FOREIGN KEY (PartID) REFERENCES Parts(PartID)\r\n            );`,\r\n            [],\r\n            () => {\r\n              console.log('Questions table created successfully');\r\n              resolve(true);\r\n            }\r\n          );\r\n      });\r\n    });\r\n  };\r\n  // tao danh sach cac bai test\r\n  export const insertTests = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        // Insert 10 bài test\r\n        for (let i = 1; i <= 10; i++) {\r\n          tx.executeSql(\r\n            'INSERT OR IGNORE INTO Tests (TestID, Title) VALUES (?, ?)',\r\n            [i.toString(), `SpeakingTest${i}`],\r\n            (_, result) => {\r\n              if (i === 10) {\r\n                console.log('All tests inserted successfully');\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }, \r\n      (error) => {\r\n        console.error('Error inserting tests:', error);\r\n        reject(error);\r\n      },\r\n      () => {\r\n        console.log('Tests transaction completed');\r\n        resolve(true);\r\n      });\r\n    });\r\n  };\r\n\r\n    // tao danh sach cac phan trong bai test\r\n    export const insertParts = async (db: SQLite.SQLiteDatabase) => {\r\n        return new Promise((resolve, reject) => {\r\n          db.transaction(tx => {\r\n            // Lặp qua 10 bài test\r\n            for (let testId = 1; testId <= 10; testId++) {\r\n              // Lặp qua 5 phần cho mỗi bài test\r\n              for (let partNumber = 1; partNumber <= 5; partNumber++) {\r\n                const partId = `${testId}_${partNumber}`; // Tạo PartID duy nhất\r\n                tx.executeSql(\r\n                  'INSERT OR IGNORE INTO Parts (PartID, TestID, PartNumber) VALUES (?, ?, ?)',\r\n                  [partId, testId.toString(), partNumber],\r\n                  (_, result) => {\r\n                    if (testId === 10 && partNumber === 8) {\r\n                      console.log('All parts inserted successfully');\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            }\r\n          },\r\n          (error) => {\r\n            console.error('Error inserting parts:', error);\r\n            reject(error);\r\n          },\r\n          () => {\r\n            console.log('Parts transaction completed');\r\n            resolve(true);\r\n          });\r\n        });\r\n      };\r\n\r\n    // Hàm để lấy tất cả tests\r\nexport const getAllTests = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'SELECT * FROM Tests ORDER BY TestID',\r\n          [],\r\n          (_, { rows: { _array } }) => {\r\n            resolve(_array);\r\n          },\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n  \r\n  // Hàm để lấy tất cả parts của một test\r\n  export const getPartsForTest = async (db: SQLite.SQLiteDatabase, testId: string) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'SELECT * FROM Parts WHERE TestID = ? ORDER BY PartNumber',\r\n          [testId],\r\n          (_, { rows: { _array } }) => {\r\n            resolve(_array);\r\n          },\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n    "],"mappings":";AAAA,OAAO,KAAKA,MAAM,MAAM,aAAa;AAErC,OAAO,IAAMC,eAAe;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IACvC,IAAI;MACF,OAAOH,MAAM,CAACI,YAAY,CAAC,eAAe,CAAC;IAC7C,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;MAC/C,MAAME,KAAK,CAAC,yBAAyB,CAAC;IACxC;EACF,CAAC;EAAA,gBAPUN,eAAeA,CAAA;IAAA,OAAAC,IAAA,CAAAM,KAAA,OAAAC,SAAA;EAAA;AAAA,GAOzB;AAED,OAAO,IAAMC,YAAY;EAAA,IAAAC,KAAA,GAAAR,iBAAA,CAAG,WAAOS,EAAyB,EAAK;IAC/D,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtCH,EAAE,CAACI,WAAW,CAAC,UAAAC,EAAE,EAAI;QAEnBA,EAAE,CAACC,UAAU,CACV;AACX;AACA;AACA,aAAa,EACH,EAAE,EACF,YAAM;UACJZ,OAAO,CAACa,GAAG,CAAC,kCAAkC,CAAC;QACjD,CACF,CAAC;QAGDF,EAAE,CAACC,UAAU,CACV;AACX;AACA;AACA;AACA;AACA,aAAa,EACH,EAAE,EACF,YAAM;UACJZ,OAAO,CAACa,GAAG,CAAC,kCAAkC,CAAC;UAC/CL,OAAO,CAAC,IAAI,CAAC;QACf,CACF,CAAC;QAEDG,EAAE,CAACC,UAAU,CACR;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EACH,EAAE,EACF,YAAM;UACJZ,OAAO,CAACa,GAAG,CAAC,sCAAsC,CAAC;UACnDL,OAAO,CAAC,IAAI,CAAC;QACf,CACF,CAAC;MACL,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAAA,gBAjDYJ,YAAYA,CAAAU,EAAA;IAAA,OAAAT,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GAiDxB;AAED,OAAO,IAAMY,WAAW;EAAA,IAAAC,KAAA,GAAAnB,iBAAA,CAAG,WAAOS,EAAyB,EAAK;IAC9D,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtCH,EAAE,CAACI,WAAW,CAAC,UAAAC,EAAE,EAAI;QAAA,IAAAM,KAAA,YAAAA,MAAAC,CAAA,EAEW;UAC5BP,EAAE,CAACC,UAAU,CACX,2DAA2D,EAC3D,CAACM,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAG,eAAcD,CAAE,EAAC,CAAC,EAClC,UAACE,CAAC,EAAEC,MAAM,EAAK;YACb,IAAIH,CAAC,KAAK,EAAE,EAAE;cACZlB,OAAO,CAACa,GAAG,CAAC,iCAAiC,CAAC;YAChD;UACF,CACF,CAAC;QACH,CAAC;QAVD,KAAK,IAAIK,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE;UAAAD,KAAA,CAAAC,CAAA;QAAA;MAW9B,CAAC,EACD,UAACnB,KAAK,EAAK;QACTC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CU,MAAM,CAACV,KAAK,CAAC;MACf,CAAC,EACD,YAAM;QACJC,OAAO,CAACa,GAAG,CAAC,6BAA6B,CAAC;QAC1CL,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAAA,gBAzBYO,WAAWA,CAAAO,GAAA;IAAA,OAAAN,KAAA,CAAAd,KAAA,OAAAC,SAAA;EAAA;AAAA,GAyBvB;AAGC,OAAO,IAAMoB,WAAW;EAAA,IAAAC,KAAA,GAAA3B,iBAAA,CAAG,WAAOS,EAAyB,EAAK;IAC5D,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtCH,EAAE,CAACI,WAAW,CAAC,UAAAC,EAAE,EAAI;QAAA,IAAAc,MAAA,YAAAA,OAAAC,MAAA,EAE0B;UAAA,IAAAC,MAAA,YAAAA,OAAAC,UAAA,EAEa;YACtD,IAAMC,MAAM,GAAI,GAAEH,MAAO,IAAGE,UAAW,EAAC;YACxCjB,EAAE,CAACC,UAAU,CACX,2EAA2E,EAC3E,CAACiB,MAAM,EAAEH,MAAM,CAACP,QAAQ,CAAC,CAAC,EAAES,UAAU,CAAC,EACvC,UAACR,CAAC,EAAEC,MAAM,EAAK;cACb,IAAIK,MAAM,KAAK,EAAE,IAAIE,UAAU,KAAK,CAAC,EAAE;gBACrC5B,OAAO,CAACa,GAAG,CAAC,iCAAiC,CAAC;cAChD;YACF,CACF,CAAC;UACH,CAAC;UAXD,KAAK,IAAIe,UAAU,GAAG,CAAC,EAAEA,UAAU,IAAI,CAAC,EAAEA,UAAU,EAAE;YAAAD,MAAA,CAAAC,UAAA;UAAA;QAYxD,CAAC;QAdD,KAAK,IAAIF,MAAM,GAAG,CAAC,EAAEA,MAAM,IAAI,EAAE,EAAEA,MAAM,EAAE;UAAAD,MAAA,CAAAC,MAAA;QAAA;MAe7C,CAAC,EACD,UAAC3B,KAAK,EAAK;QACTC,OAAO,CAACD,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9CU,MAAM,CAACV,KAAK,CAAC;MACf,CAAC,EACD,YAAM;QACJC,OAAO,CAACa,GAAG,CAAC,6BAA6B,CAAC;QAC1CL,OAAO,CAAC,IAAI,CAAC;MACf,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAAA,gBA7BUe,WAAWA,CAAAO,GAAA;IAAA,OAAAN,KAAA,CAAAtB,KAAA,OAAAC,SAAA;EAAA;AAAA,GA6BrB;AAGP,OAAO,IAAM4B,WAAW;EAAA,IAAAC,KAAA,GAAAnC,iBAAA,CAAG,WAAOS,EAAyB,EAAK;IAC5D,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtCH,EAAE,CAACI,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX,qCAAqC,EACrC,EAAE,EACF,UAACQ,CAAC,EAAAa,KAAA,EAA2B;UAAA,IAAfC,MAAM,GAAAD,KAAA,CAAdE,IAAI,CAAID,MAAM;UAClB1B,OAAO,CAAC0B,MAAM,CAAC;QACjB,CAAC,EACD,UAACd,CAAC,EAAErB,KAAK,EAAK;UACZU,MAAM,CAACV,KAAK,CAAC;UACb,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAAA,gBAhBUgC,WAAWA,CAAAK,GAAA;IAAA,OAAAJ,KAAA,CAAA9B,KAAA,OAAAC,SAAA;EAAA;AAAA,GAgBrB;AAGD,OAAO,IAAMkC,eAAe;EAAA,IAAAC,KAAA,GAAAzC,iBAAA,CAAG,WAAOS,EAAyB,EAAEoB,MAAc,EAAK;IAClF,OAAO,IAAInB,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;MACtCH,EAAE,CAACI,WAAW,CAAC,UAAAC,EAAE,EAAI;QACnBA,EAAE,CAACC,UAAU,CACX,0DAA0D,EAC1D,CAACc,MAAM,CAAC,EACR,UAACN,CAAC,EAAAmB,KAAA,EAA2B;UAAA,IAAfL,MAAM,GAAAK,KAAA,CAAdJ,IAAI,CAAID,MAAM;UAClB1B,OAAO,CAAC0B,MAAM,CAAC;QACjB,CAAC,EACD,UAACd,CAAC,EAAErB,KAAK,EAAK;UACZU,MAAM,CAACV,KAAK,CAAC;UACb,OAAO,KAAK;QACd,CACF,CAAC;MACH,CAAC,CAAC;IACJ,CAAC,CAAC;EACJ,CAAC;EAAA,gBAhBYsC,eAAeA,CAAAG,GAAA,EAAAC,GAAA;IAAA,OAAAH,KAAA,CAAApC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAgB3B"},"metadata":{},"sourceType":"module","externalDependencies":[]}
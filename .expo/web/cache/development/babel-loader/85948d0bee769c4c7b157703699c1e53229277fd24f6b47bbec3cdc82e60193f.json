{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nvar db;\nif (Platform.OS === 'web') {\n  db = {\n    transaction: function transaction(callback) {\n      console.log('Web database transaction');\n      callback({\n        executeSql: function executeSql(query, params, successCallback, errorCallback) {\n          console.log('Executing SQL on web:', query);\n          successCallback();\n        }\n      });\n    }\n  };\n} else {\n  var _SQLite = require('expo-sqlite');\n  db = _SQLite.openDatabase('mydb.db');\n}\ndb.transaction(function (tx) {\n  tx.executeSql('CREATE TABLE IF NOT EXISTS items (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)', [], function () {\n    console.log('Table created successfully');\n  }, function (_, error) {\n    console.log('Error:', error);\n    return false;\n  });\n});\nexport var getDBConnection = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      return SQLite.openDatabase('Toeic-data.db');\n    } catch (error) {\n      console.error('Error opening database:', error);\n      throw Error('Failed to open database');\n    }\n  });\n  return function getDBConnection() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var createTables = function () {\n  var _ref2 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Tests (\n            TestID TEXT PRIMARY KEY,\n            Title TEXT NOT NULL\n          );`, [], function () {\n          console.log('Tests table created successfully');\n        });\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Parts (\n            PartID TEXT PRIMARY KEY,\n            TestID TEXT,\n            PartNumber INTEGER NOT NULL,\n            FOREIGN KEY (TestID) REFERENCES Tests(TestID)\n          );`, [], function () {\n          console.log('Parts table created successfully');\n          resolve(true);\n        });\n        tx.executeSql(`CREATE TABLE IF NOT EXISTS Questions (\n            QuestionID TEXT PRIMARY KEY,\n            PartID TEXT,\n            QuestionNumber INTEGER NOT NULL,\n            QuestionText TEXT,\n            ImagePath TEXT,\n            AudioPath TEXT,\n            CorrectAnswer TEXT,\n            FOREIGN KEY (PartID) REFERENCES Parts(PartID)\n            );`, [], function () {\n          console.log('Questions table created successfully');\n          resolve(true);\n        });\n      });\n    });\n  });\n  return function createTables(_x) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var insertTests = function () {\n  var _ref3 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        var _loop = function _loop(i) {\n          tx.executeSql('INSERT OR IGNORE INTO Tests (TestID, Title) VALUES (?, ?)', [i.toString(), `SpeakingTest${i}`], function (_, result) {\n            if (i === 10) {\n              console.log('All tests inserted successfully');\n            }\n          });\n        };\n        for (var i = 1; i <= 10; i++) {\n          _loop(i);\n        }\n      }, function (error) {\n        console.error('Error inserting tests:', error);\n        reject(error);\n      }, function () {\n        console.log('Tests transaction completed');\n        resolve(true);\n      });\n    });\n  });\n  return function insertTests(_x2) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var insertParts = function () {\n  var _ref4 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        var _loop2 = function _loop2(testId) {\n          var _loop3 = function _loop3(partNumber) {\n            var partId = `${testId}_${partNumber}`;\n            tx.executeSql('INSERT OR IGNORE INTO Parts (PartID, TestID, PartNumber) VALUES (?, ?, ?)', [partId, testId.toString(), partNumber], function (_, result) {\n              if (testId === 10 && partNumber === 8) {\n                console.log('All parts inserted successfully');\n              }\n            });\n          };\n          for (var partNumber = 1; partNumber <= 5; partNumber++) {\n            _loop3(partNumber);\n          }\n        };\n        for (var testId = 1; testId <= 10; testId++) {\n          _loop2(testId);\n        }\n      }, function (error) {\n        console.error('Error inserting parts:', error);\n        reject(error);\n      }, function () {\n        console.log('Parts transaction completed');\n        resolve(true);\n      });\n    });\n  });\n  return function insertParts(_x3) {\n    return _ref4.apply(this, arguments);\n  };\n}();\nexport var getAllTests = function () {\n  var _ref5 = _asyncToGenerator(function* (db) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM Tests ORDER BY TestID', [], function (_, _ref6) {\n          var _array = _ref6.rows._array;\n          resolve(_array);\n        }, function (_, error) {\n          reject(error);\n          return false;\n        });\n      });\n    });\n  });\n  return function getAllTests(_x4) {\n    return _ref5.apply(this, arguments);\n  };\n}();\nexport var getPartsForTest = function () {\n  var _ref7 = _asyncToGenerator(function* (db, testId) {\n    return new Promise(function (resolve, reject) {\n      db.transaction(function (tx) {\n        tx.executeSql('SELECT * FROM Parts WHERE TestID = ? ORDER BY PartNumber', [testId], function (_, _ref8) {\n          var _array = _ref8.rows._array;\n          resolve(_array);\n        }, function (_, error) {\n          reject(error);\n          return false;\n        });\n      });\n    });\n  });\n  return function getPartsForTest(_x5, _x6) {\n    return _ref7.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["db","Platform","OS","transaction","callback","console","log","executeSql","query","params","successCallback","errorCallback","SQLite","require","openDatabase","tx","_","error","getDBConnection","_ref","_asyncToGenerator","Error","apply","arguments","createTables","_ref2","Promise","resolve","reject","_x","insertTests","_ref3","_loop","i","toString","result","_x2","insertParts","_ref4","_loop2","testId","_loop3","partNumber","partId","_x3","getAllTests","_ref5","_ref6","_array","rows","_x4","getPartsForTest","_ref7","_ref8","_x5","_x6"],"sources":["D:/Loc2023-2024/Mobile App/TOEIC-practice-app/src/database/db-service.ts"],"sourcesContent":["import { Platform } from 'react-native';\r\n\r\nlet db;\r\n\r\nif (Platform.OS === 'web') {\r\n  // Web-specific database implementation\r\n  db = {\r\n    transaction: (callback) => {\r\n      // Implement web-based transaction logic here\r\n      console.log('Web database transaction');\r\n      callback({\r\n        executeSql: (query, params, successCallback, errorCallback) => {\r\n          // Implement web-based SQL execution logic here\r\n          console.log('Executing SQL on web:', query);\r\n          successCallback();\r\n        }\r\n      });\r\n    }\r\n  };\r\n} else {\r\n  // Native (iOS/Android) database implementation\r\n  const SQLite = require('expo-sqlite');\r\n  db = SQLite.openDatabase('mydb.db');\r\n}\r\n\r\n// Usage\r\ndb.transaction(tx => {\r\n  tx.executeSql(\r\n    'CREATE TABLE IF NOT EXISTS items (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT)',\r\n    [],\r\n    () => {\r\n      console.log('Table created successfully');\r\n    },\r\n    (_, error) => {\r\n      console.log('Error:', error);\r\n      return false;\r\n    }\r\n  );\r\n});\r\n\r\nexport const getDBConnection = async () => {\r\n    try {\r\n      return SQLite.openDatabase('Toeic-data.db');\r\n    } catch (error) {\r\n      console.error('Error opening database:', error);\r\n      throw Error('Failed to open database');\r\n    }\r\n  };\r\n\r\n  export const createTables = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        // Tạo bảng Tests\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS Tests (\r\n            TestID TEXT PRIMARY KEY,\r\n            Title TEXT NOT NULL\r\n          );`,\r\n          [],\r\n          () => {\r\n            console.log('Tests table created successfully');\r\n          }\r\n        );\r\n  \r\n        // Tạo bảng Parts\r\n        tx.executeSql(\r\n          `CREATE TABLE IF NOT EXISTS Parts (\r\n            PartID TEXT PRIMARY KEY,\r\n            TestID TEXT,\r\n            PartNumber INTEGER NOT NULL,\r\n            FOREIGN KEY (TestID) REFERENCES Tests(TestID)\r\n          );`,\r\n          [],\r\n          () => {\r\n            console.log('Parts table created successfully');\r\n            resolve(true);\r\n          }\r\n        );\r\n        // Tạo bảng Parts\r\n        tx.executeSql(\r\n            `CREATE TABLE IF NOT EXISTS Questions (\r\n            QuestionID TEXT PRIMARY KEY,\r\n            PartID TEXT,\r\n            QuestionNumber INTEGER NOT NULL,\r\n            QuestionText TEXT,\r\n            ImagePath TEXT,\r\n            AudioPath TEXT,\r\n            CorrectAnswer TEXT,\r\n            FOREIGN KEY (PartID) REFERENCES Parts(PartID)\r\n            );`,\r\n            [],\r\n            () => {\r\n              console.log('Questions table created successfully');\r\n              resolve(true);\r\n            }\r\n          );\r\n      });\r\n    });\r\n  };\r\n  // tao danh sach cac bai test\r\n  export const insertTests = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        // Insert 10 bài test\r\n        for (let i = 1; i <= 10; i++) {\r\n          tx.executeSql(\r\n            'INSERT OR IGNORE INTO Tests (TestID, Title) VALUES (?, ?)',\r\n            [i.toString(), `SpeakingTest${i}`],\r\n            (_, result) => {\r\n              if (i === 10) {\r\n                console.log('All tests inserted successfully');\r\n              }\r\n            }\r\n          );\r\n        }\r\n      }, \r\n      (error) => {\r\n        console.error('Error inserting tests:', error);\r\n        reject(error);\r\n      },\r\n      () => {\r\n        console.log('Tests transaction completed');\r\n        resolve(true);\r\n      });\r\n    });\r\n  };\r\n\r\n    // tao danh sach cac phan trong bai test\r\n    export const insertParts = async (db: SQLite.SQLiteDatabase) => {\r\n        return new Promise((resolve, reject) => {\r\n          db.transaction(tx => {\r\n            // Lặp qua 10 bài test\r\n            for (let testId = 1; testId <= 10; testId++) {\r\n              // Lặp qua 5 phần cho mỗi bài test\r\n              for (let partNumber = 1; partNumber <= 5; partNumber++) {\r\n                const partId = `${testId}_${partNumber}`; // Tạo PartID duy nhất\r\n                tx.executeSql(\r\n                  'INSERT OR IGNORE INTO Parts (PartID, TestID, PartNumber) VALUES (?, ?, ?)',\r\n                  [partId, testId.toString(), partNumber],\r\n                  (_, result) => {\r\n                    if (testId === 10 && partNumber === 8) {\r\n                      console.log('All parts inserted successfully');\r\n                    }\r\n                  }\r\n                );\r\n              }\r\n            }\r\n          },\r\n          (error) => {\r\n            console.error('Error inserting parts:', error);\r\n            reject(error);\r\n          },\r\n          () => {\r\n            console.log('Parts transaction completed');\r\n            resolve(true);\r\n          });\r\n        });\r\n      };\r\n\r\n    // Hàm để lấy tất cả tests\r\nexport const getAllTests = async (db: SQLite.SQLiteDatabase) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'SELECT * FROM Tests ORDER BY TestID',\r\n          [],\r\n          (_, { rows: { _array } }) => {\r\n            resolve(_array);\r\n          },\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n  \r\n  // Hàm để lấy tất cả parts của một test\r\n  export const getPartsForTest = async (db: SQLite.SQLiteDatabase, testId: string) => {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(tx => {\r\n        tx.executeSql(\r\n          'SELECT * FROM Parts WHERE TestID = ? ORDER BY PartNumber',\r\n          [testId],\r\n          (_, { rows: { _array } }) => {\r\n            resolve(_array);\r\n          },\r\n          (_, error) => {\r\n            reject(error);\r\n            return false;\r\n          }\r\n        );\r\n      });\r\n    });\r\n  };\r\n\r\n    "],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}